.. Copyright (C) 2001-2015 NLTK Project
.. For license information, see LICENSE.TXT

.. -*- coding: utf-8 -*-


Regression Tests
================


Issue 367
---------
https://github.com/nltk/nltk/issues/367

Reproducing @dan-blanchard's example:
https://github.com/nltk/nltk/issues/367#issuecomment-14646110

    >>> from nltk.model import LidstoneNgramModel, Vocabulary
    >>> word_seq = list('aaaababaaccbacb')
    >>> V = Vocabulary(['a', 'b', 'c', ''])
    >>> lm = LidstoneNgramModel(0.2, 2, vocabulary=V, pad_fn=lambda sent: sent)
    >>> lm.fit([word_seq])
    >>> round(sum(lm.score(w, ("b",)) for w in V), 6)
    1.0
    >>> round(sum(lm.score(w, ("a",)) for w in V), 6)
    1.0

    >>> [lm.score(w, ("b",)) for w in V]
    [0.8, 0.05, 0.05, 0.05, 0.05]
    >>> [round(lm.score(w, ("a",)), 4) for w in V]
    [0.4667, 0.2444, 0.2444, 0.0222, 0.0222]


Here's reproducing @afourney's comment:
https://github.com/nltk/nltk/issues/367#issuecomment-15686289

    >>> sent = ['foo', 'foo', 'foo', 'foo', 'bar', 'baz']
    >>> from nltk.model import LidstoneNgramModel
    >>> lm = LidstoneNgramModel(0.2, 3)
    >>> lm.fit([sent])

The vocabulary includes the "UNK" symbol as well as two padding symbols.

    >>> len(lm.vocab)
    6
    >>> word = "foo"
    >>> context = ("bar", "baz")

The raw counts.

    >>> lm.context_counts(context)[word]
    0
    >>> lm.context_counts(context).N()
    1

Counts with Lidstone smoothing.

    >>> lm.context_counts(context)[word] + lm.gamma
    0.2
    >>> lm.context_counts(context).N() + len(lm.vocab) * lm.gamma
    2.2

Without any backoff, just using Lidstone smoothing, P("foo" | "bar", "baz") should be:
0.2 / 2.2 ~= 0.090909

    >>> round(lm.score(word, context), 6)
    0.090909


Issue 380
---------
https://github.com/nltk/nltk/issues/380

Reproducing setup akin to this comment:
https://github.com/nltk/nltk/issues/380#issue-12879030

For speed take only the first 100 sentences of reuters. Shouldn't affect the test.
    >>> from nltk.corpus import reuters
    >>> sents = reuters.sents()[:100]

    >>> from nltk.model import LidstoneNgramModel
    >>> lm = LidstoneNgramModel(0.2, 3)
    >>> lm.fit(sents)
    >>> lm.score("said", ("",)) < 1
    True
